// Code generated by mockery v2.20.0. DO NOT EDIT.

package user

import (
	context "context"
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type MockUseCaseInterface struct {
	mock.Mock
}

type MockUseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCaseInterface) EXPECT() *MockUseCaseInterface_Expecter {
	return &MockUseCaseInterface_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: ctx, oldPassword, user
func (_m *MockUseCaseInterface) ChangePassword(ctx context.Context, oldPassword string, user entities.User) (error, error) {
	ret := _m.Called(ctx, oldPassword, user)

	var r0 error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.User) (error, error)); ok {
		return rf(ctx, oldPassword, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.User) error); ok {
		r0 = rf(ctx, oldPassword, user)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entities.User) error); ok {
		r1 = rf(ctx, oldPassword, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUseCaseInterface_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - oldPassword string
//   - user entities.User
func (_e *MockUseCaseInterface_Expecter) ChangePassword(ctx interface{}, oldPassword interface{}, user interface{}) *MockUseCaseInterface_ChangePassword_Call {
	return &MockUseCaseInterface_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, oldPassword, user)}
}

func (_c *MockUseCaseInterface_ChangePassword_Call) Run(run func(ctx context.Context, oldPassword string, user entities.User)) *MockUseCaseInterface_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entities.User))
	})
	return _c
}

func (_c *MockUseCaseInterface_ChangePassword_Call) Return(result error, err error) *MockUseCaseInterface_ChangePassword_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockUseCaseInterface_ChangePassword_Call) RunAndReturn(run func(context.Context, string, entities.User) (error, error)) *MockUseCaseInterface_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CountAll provides a mock function with given fields: ctx, username, role
func (_m *MockUseCaseInterface) CountAll(ctx context.Context, username string, role string) (int, error) {
	ret := _m.Called(ctx, username, role)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, username, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, username, role)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type MockUseCaseInterface_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - role string
func (_e *MockUseCaseInterface_Expecter) CountAll(ctx interface{}, username interface{}, role interface{}) *MockUseCaseInterface_CountAll_Call {
	return &MockUseCaseInterface_CountAll_Call{Call: _e.mock.On("CountAll", ctx, username, role)}
}

func (_c *MockUseCaseInterface_CountAll_Call) Run(run func(ctx context.Context, username string, role string)) *MockUseCaseInterface_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCaseInterface_CountAll_Call) Return(_a0 int, _a1 error) *MockUseCaseInterface_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCaseInterface_CountAll_Call) RunAndReturn(run func(context.Context, string, string) (int, error)) *MockUseCaseInterface_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, actor
func (_m *MockUseCaseInterface) CreateUser(ctx context.Context, actor entities.User) (entities.User, error) {
	ret := _m.Called(ctx, actor)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) (entities.User, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) entities.User); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUseCaseInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - actor entities.User
func (_e *MockUseCaseInterface_Expecter) CreateUser(ctx interface{}, actor interface{}) *MockUseCaseInterface_CreateUser_Call {
	return &MockUseCaseInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, actor)}
}

func (_c *MockUseCaseInterface_CreateUser_Call) Run(run func(ctx context.Context, actor entities.User)) *MockUseCaseInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *MockUseCaseInterface_CreateUser_Call) Return(result entities.User, err error) *MockUseCaseInterface_CreateUser_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockUseCaseInterface_CreateUser_Call) RunAndReturn(run func(context.Context, entities.User) (entities.User, error)) *MockUseCaseInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, username
func (_m *MockUseCaseInterface) DeleteUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCaseInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUseCaseInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUseCaseInterface_Expecter) DeleteUser(ctx interface{}, username interface{}) *MockUseCaseInterface_DeleteUser_Call {
	return &MockUseCaseInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, username)}
}

func (_c *MockUseCaseInterface_DeleteUser_Call) Run(run func(ctx context.Context, username string)) *MockUseCaseInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCaseInterface_DeleteUser_Call) Return(err error) *MockUseCaseInterface_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUseCaseInterface_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUseCaseInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, username, role, limit, offset
func (_m *MockUseCaseInterface) GetAll(ctx context.Context, username string, role string, limit uint, offset uint) ([]entities.User, error) {
	ret := _m.Called(ctx, username, role, limit, offset)

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint, uint) ([]entities.User, error)); ok {
		return rf(ctx, username, role, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint, uint) []entities.User); ok {
		r0 = rf(ctx, username, role, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint, uint) error); ok {
		r1 = rf(ctx, username, role, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockUseCaseInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - role string
//   - limit uint
//   - offset uint
func (_e *MockUseCaseInterface_Expecter) GetAll(ctx interface{}, username interface{}, role interface{}, limit interface{}, offset interface{}) *MockUseCaseInterface_GetAll_Call {
	return &MockUseCaseInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, username, role, limit, offset)}
}

func (_c *MockUseCaseInterface_GetAll_Call) Run(run func(ctx context.Context, username string, role string, limit uint, offset uint)) *MockUseCaseInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uint), args[4].(uint))
	})
	return _c
}

func (_c *MockUseCaseInterface_GetAll_Call) Return(_a0 []entities.User, _a1 error) *MockUseCaseInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCaseInterface_GetAll_Call) RunAndReturn(run func(context.Context, string, string, uint, uint) ([]entities.User, error)) *MockUseCaseInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *MockUseCaseInterface) GetByUsername(ctx context.Context, username string) (entities.User, error) {
	ret := _m.Called(ctx, username)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUseCaseInterface_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUseCaseInterface_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUseCaseInterface_GetByUsername_Call {
	return &MockUseCaseInterface_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUseCaseInterface_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUseCaseInterface_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCaseInterface_GetByUsername_Call) Return(actor entities.User, err error) *MockUseCaseInterface_GetByUsername_Call {
	_c.Call.Return(actor, err)
	return _c
}

func (_c *MockUseCaseInterface_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (entities.User, error)) *MockUseCaseInterface_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, actor
func (_m *MockUseCaseInterface) UpdateUser(ctx context.Context, actor entities.User) (entities.User, error) {
	ret := _m.Called(ctx, actor)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) (entities.User, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) entities.User); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUseCaseInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - actor entities.User
func (_e *MockUseCaseInterface_Expecter) UpdateUser(ctx interface{}, actor interface{}) *MockUseCaseInterface_UpdateUser_Call {
	return &MockUseCaseInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, actor)}
}

func (_c *MockUseCaseInterface_UpdateUser_Call) Run(run func(ctx context.Context, actor entities.User)) *MockUseCaseInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *MockUseCaseInterface_UpdateUser_Call) Return(result entities.User, err error) *MockUseCaseInterface_UpdateUser_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockUseCaseInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, entities.User) (entities.User, error)) *MockUseCaseInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// validateActor provides a mock function with given fields: actor, validations
func (_m *MockUseCaseInterface) validateActor(actor entities.User, validations ...validateFunc) (error, error) {
	_va := make([]interface{}, len(validations))
	for _i := range validations {
		_va[_i] = validations[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, actor)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User, ...validateFunc) (error, error)); ok {
		return rf(actor, validations...)
	}
	if rf, ok := ret.Get(0).(func(entities.User, ...validateFunc) error); ok {
		r0 = rf(actor, validations...)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(entities.User, ...validateFunc) error); ok {
		r1 = rf(actor, validations...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCaseInterface_validateActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'validateActor'
type MockUseCaseInterface_validateActor_Call struct {
	*mock.Call
}

// validateActor is a helper method to define mock.On call
//   - actor entities.User
//   - validations ...validateFunc
func (_e *MockUseCaseInterface_Expecter) validateActor(actor interface{}, validations ...interface{}) *MockUseCaseInterface_validateActor_Call {
	return &MockUseCaseInterface_validateActor_Call{Call: _e.mock.On("validateActor",
		append([]interface{}{actor}, validations...)...)}
}

func (_c *MockUseCaseInterface_validateActor_Call) Run(run func(actor entities.User, validations ...validateFunc)) *MockUseCaseInterface_validateActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]validateFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(validateFunc)
			}
		}
		run(args[0].(entities.User), variadicArgs...)
	})
	return _c
}

func (_c *MockUseCaseInterface_validateActor_Call) Return(_a0 error, _a1 error) *MockUseCaseInterface_validateActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCaseInterface_validateActor_Call) RunAndReturn(run func(entities.User, ...validateFunc) (error, error)) *MockUseCaseInterface_validateActor_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUseCaseInterface creates a new instance of MockUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUseCaseInterface(t mockConstructorTestingTNewMockUseCaseInterface) *MockUseCaseInterface {
	mock := &MockUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"
	csv "nashrul-be/crm/utils/csv"

	mock "github.com/stretchr/testify/mock"

	repositories "nashrul-be/crm/repositories"
)

// UseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type UseCaseInterface struct {
	mock.Mock
}

type UseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseInterface) EXPECT() *UseCaseInterface_Expecter {
	return &UseCaseInterface_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with given fields: ctx, query
func (_m *UseCaseInterface) CountAll(ctx context.Context, query repositories.AuditQuery) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) (int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AuditQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type UseCaseInterface_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
func (_e *UseCaseInterface_Expecter) CountAll(ctx interface{}, query interface{}) *UseCaseInterface_CountAll_Call {
	return &UseCaseInterface_CountAll_Call{Call: _e.mock.On("CountAll", ctx, query)}
}

func (_c *UseCaseInterface_CountAll_Call) Run(run func(ctx context.Context, query repositories.AuditQuery)) *UseCaseInterface_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery))
	})
	return _c
}

func (_c *UseCaseInterface_CountAll_Call) Return(_a0 int, _a1 error) *UseCaseInterface_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_CountAll_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery) (int, error)) *UseCaseInterface_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAudit provides a mock function with given fields: ctx, action
func (_m *UseCaseInterface) CreateAudit(ctx context.Context, action string) error {
	ret := _m.Called(ctx, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCaseInterface_CreateAudit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAudit'
type UseCaseInterface_CreateAudit_Call struct {
	*mock.Call
}

// CreateAudit is a helper method to define mock.On call
//   - ctx context.Context
//   - action string
func (_e *UseCaseInterface_Expecter) CreateAudit(ctx interface{}, action interface{}) *UseCaseInterface_CreateAudit_Call {
	return &UseCaseInterface_CreateAudit_Call{Call: _e.mock.On("CreateAudit", ctx, action)}
}

func (_c *UseCaseInterface_CreateAudit_Call) Run(run func(ctx context.Context, action string)) *UseCaseInterface_CreateAudit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCaseInterface_CreateAudit_Call) Return(_a0 error) *UseCaseInterface_CreateAudit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseInterface_CreateAudit_Call) RunAndReturn(run func(context.Context, string) error) *UseCaseInterface_CreateAudit_Call {
	_c.Call.Return(run)
	return _c
}

// ExportCsv provides a mock function with given fields: ctx, query
func (_m *UseCaseInterface) ExportCsv(ctx context.Context, query repositories.AuditQuery) (*csv.FileCsv, error) {
	ret := _m.Called(ctx, query)

	var r0 *csv.FileCsv
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) (*csv.FileCsv, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) *csv.FileCsv); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csv.FileCsv)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AuditQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_ExportCsv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportCsv'
type UseCaseInterface_ExportCsv_Call struct {
	*mock.Call
}

// ExportCsv is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
func (_e *UseCaseInterface_Expecter) ExportCsv(ctx interface{}, query interface{}) *UseCaseInterface_ExportCsv_Call {
	return &UseCaseInterface_ExportCsv_Call{Call: _e.mock.On("ExportCsv", ctx, query)}
}

func (_c *UseCaseInterface_ExportCsv_Call) Run(run func(ctx context.Context, query repositories.AuditQuery)) *UseCaseInterface_ExportCsv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery))
	})
	return _c
}

func (_c *UseCaseInterface_ExportCsv_Call) Return(_a0 *csv.FileCsv, _a1 error) *UseCaseInterface_ExportCsv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_ExportCsv_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery) (*csv.FileCsv, error)) *UseCaseInterface_ExportCsv_Call {
	_c.Call.Return(run)
	return _c
}

// ExportCsvAsync provides a mock function with given fields: ctx, query
func (_m *UseCaseInterface) ExportCsvAsync(ctx context.Context, query repositories.AuditQuery) error {
	ret := _m.Called(ctx, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCaseInterface_ExportCsvAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportCsvAsync'
type UseCaseInterface_ExportCsvAsync_Call struct {
	*mock.Call
}

// ExportCsvAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
func (_e *UseCaseInterface_Expecter) ExportCsvAsync(ctx interface{}, query interface{}) *UseCaseInterface_ExportCsvAsync_Call {
	return &UseCaseInterface_ExportCsvAsync_Call{Call: _e.mock.On("ExportCsvAsync", ctx, query)}
}

func (_c *UseCaseInterface_ExportCsvAsync_Call) Run(run func(ctx context.Context, query repositories.AuditQuery)) *UseCaseInterface_ExportCsvAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery))
	})
	return _c
}

func (_c *UseCaseInterface_ExportCsvAsync_Call) Return(_a0 error) *UseCaseInterface_ExportCsvAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseInterface_ExportCsvAsync_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery) error) *UseCaseInterface_ExportCsvAsync_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *UseCaseInterface) GetAll(ctx context.Context, query repositories.AuditQuery, limit int, offset int) ([]entities.Audit, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []entities.Audit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery, int, int) ([]entities.Audit, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery, int, int) []entities.Audit); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Audit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AuditQuery, int, int) error); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UseCaseInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
//   - limit int
//   - offset int
func (_e *UseCaseInterface_Expecter) GetAll(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *UseCaseInterface_GetAll_Call {
	return &UseCaseInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, query, limit, offset)}
}

func (_c *UseCaseInterface_GetAll_Call) Run(run func(ctx context.Context, query repositories.AuditQuery, limit int, offset int)) *UseCaseInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *UseCaseInterface_GetAll_Call) Return(_a0 []entities.Audit, _a1 error) *UseCaseInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAll_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery, int, int) ([]entities.Audit, error)) *UseCaseInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseInterface creates a new instance of UseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseInterface(t mockConstructorTestingTNewUseCaseInterface) *UseCaseInterface {
	mock := &UseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

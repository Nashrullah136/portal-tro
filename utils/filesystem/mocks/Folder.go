// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	filesystem "nashrul-be/crm/utils/filesystem"

	mock "github.com/stretchr/testify/mock"
)

// Folder is an autogenerated mock type for the Folder type
type Folder struct {
	mock.Mock
}

type Folder_Expecter struct {
	mock *mock.Mock
}

func (_m *Folder) EXPECT() *Folder_Expecter {
	return &Folder_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: filename
func (_m *Folder) Create(filename string) (filesystem.File, error) {
	ret := _m.Called(filename)

	var r0 filesystem.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (filesystem.File, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) filesystem.File); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Folder_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Folder_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - filename string
func (_e *Folder_Expecter) Create(filename interface{}) *Folder_Create_Call {
	return &Folder_Create_Call{Call: _e.mock.On("Create", filename)}
}

func (_c *Folder_Create_Call) Run(run func(filename string)) *Folder_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Folder_Create_Call) Return(_a0 filesystem.File, _a1 error) *Folder_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Folder_Create_Call) RunAndReturn(run func(string) (filesystem.File, error)) *Folder_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFiles provides a mock function with given fields:
func (_m *Folder) GetAllFiles() []filesystem.File {
	ret := _m.Called()

	var r0 []filesystem.File
	if rf, ok := ret.Get(0).(func() []filesystem.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]filesystem.File)
		}
	}

	return r0
}

// Folder_GetAllFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFiles'
type Folder_GetAllFiles_Call struct {
	*mock.Call
}

// GetAllFiles is a helper method to define mock.On call
func (_e *Folder_Expecter) GetAllFiles() *Folder_GetAllFiles_Call {
	return &Folder_GetAllFiles_Call{Call: _e.mock.On("GetAllFiles")}
}

func (_c *Folder_GetAllFiles_Call) Run(run func()) *Folder_GetAllFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Folder_GetAllFiles_Call) Return(_a0 []filesystem.File) *Folder_GetAllFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Folder_GetAllFiles_Call) RunAndReturn(run func() []filesystem.File) *Folder_GetAllFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: filename
func (_m *Folder) GetFile(filename string) (filesystem.File, error) {
	ret := _m.Called(filename)

	var r0 filesystem.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (filesystem.File, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) filesystem.File); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Folder_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type Folder_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - filename string
func (_e *Folder_Expecter) GetFile(filename interface{}) *Folder_GetFile_Call {
	return &Folder_GetFile_Call{Call: _e.mock.On("GetFile", filename)}
}

func (_c *Folder_GetFile_Call) Run(run func(filename string)) *Folder_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Folder_GetFile_Call) Return(_a0 filesystem.File, _a1 error) *Folder_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Folder_GetFile_Call) RunAndReturn(run func(string) (filesystem.File, error)) *Folder_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetPath provides a mock function with given fields:
func (_m *Folder) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Folder_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type Folder_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
func (_e *Folder_Expecter) GetPath() *Folder_GetPath_Call {
	return &Folder_GetPath_Call{Call: _e.mock.On("GetPath")}
}

func (_c *Folder_GetPath_Call) Run(run func()) *Folder_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Folder_GetPath_Call) Return(_a0 string) *Folder_GetPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Folder_GetPath_Call) RunAndReturn(run func() string) *Folder_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFolder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFolder creates a new instance of Folder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFolder(t mockConstructorTestingTNewFolder) *Folder {
	mock := &Folder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

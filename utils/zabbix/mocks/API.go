// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	zabbix "nashrul-be/crm/utils/zabbix"

	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

type API_Expecter struct {
	mock *mock.Mock
}

func (_m *API) EXPECT() *API_Expecter {
	return &API_Expecter{mock: &_m.Mock}
}

// GetAllHost provides a mock function with given fields:
func (_m *API) GetAllHost() ([]zabbix.Host, error) {
	ret := _m.Called()

	var r0 []zabbix.Host
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]zabbix.Host, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []zabbix.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zabbix.Host)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetAllHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllHost'
type API_GetAllHost_Call struct {
	*mock.Call
}

// GetAllHost is a helper method to define mock.On call
func (_e *API_Expecter) GetAllHost() *API_GetAllHost_Call {
	return &API_GetAllHost_Call{Call: _e.mock.On("GetAllHost")}
}

func (_c *API_GetAllHost_Call) Run(run func()) *API_GetAllHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *API_GetAllHost_Call) Return(result []zabbix.Host, err error) *API_GetAllHost_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *API_GetAllHost_Call) RunAndReturn(run func() ([]zabbix.Host, error)) *API_GetAllHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistoryFromItem provides a mock function with given fields: itemIds
func (_m *API) GetHistoryFromItem(itemIds []string) ([]zabbix.History, error) {
	ret := _m.Called(itemIds)

	var r0 []zabbix.History
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]zabbix.History, error)); ok {
		return rf(itemIds)
	}
	if rf, ok := ret.Get(0).(func([]string) []zabbix.History); ok {
		r0 = rf(itemIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zabbix.History)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(itemIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetHistoryFromItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistoryFromItem'
type API_GetHistoryFromItem_Call struct {
	*mock.Call
}

// GetHistoryFromItem is a helper method to define mock.On call
//   - itemIds []string
func (_e *API_Expecter) GetHistoryFromItem(itemIds interface{}) *API_GetHistoryFromItem_Call {
	return &API_GetHistoryFromItem_Call{Call: _e.mock.On("GetHistoryFromItem", itemIds)}
}

func (_c *API_GetHistoryFromItem_Call) Run(run func(itemIds []string)) *API_GetHistoryFromItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *API_GetHistoryFromItem_Call) Return(result []zabbix.History, err error) *API_GetHistoryFromItem_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *API_GetHistoryFromItem_Call) RunAndReturn(run func([]string) ([]zabbix.History, error)) *API_GetHistoryFromItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemFromHosts provides a mock function with given fields: hostIds
func (_m *API) GetItemFromHosts(hostIds []string) ([]zabbix.Item, error) {
	ret := _m.Called(hostIds)

	var r0 []zabbix.Item
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]zabbix.Item, error)); ok {
		return rf(hostIds)
	}
	if rf, ok := ret.Get(0).(func([]string) []zabbix.Item); ok {
		r0 = rf(hostIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zabbix.Item)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(hostIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetItemFromHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemFromHosts'
type API_GetItemFromHosts_Call struct {
	*mock.Call
}

// GetItemFromHosts is a helper method to define mock.On call
//   - hostIds []string
func (_e *API_Expecter) GetItemFromHosts(hostIds interface{}) *API_GetItemFromHosts_Call {
	return &API_GetItemFromHosts_Call{Call: _e.mock.On("GetItemFromHosts", hostIds)}
}

func (_c *API_GetItemFromHosts_Call) Run(run func(hostIds []string)) *API_GetItemFromHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *API_GetItemFromHosts_Call) Return(result []zabbix.Item, err error) *API_GetItemFromHosts_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *API_GetItemFromHosts_Call) RunAndReturn(run func([]string) ([]zabbix.Item, error)) *API_GetItemFromHosts_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// GetItemIds provides a mock function with given fields:
func (_m *Cache) GetItemIds() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetItemIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemIds'
type Cache_GetItemIds_Call struct {
	*mock.Call
}

// GetItemIds is a helper method to define mock.On call
func (_e *Cache_Expecter) GetItemIds() *Cache_GetItemIds_Call {
	return &Cache_GetItemIds_Call{Call: _e.mock.On("GetItemIds")}
}

func (_c *Cache_GetItemIds_Call) Run(run func()) *Cache_GetItemIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_GetItemIds_Call) Return(_a0 []string, _a1 error) *Cache_GetItemIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetItemIds_Call) RunAndReturn(run func() ([]string, error)) *Cache_GetItemIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastValue provides a mock function with given fields:
func (_m *Cache) GetLastValue() ([]entities.ServerUtilization, error) {
	ret := _m.Called()

	var r0 []entities.ServerUtilization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.ServerUtilization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.ServerUtilization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ServerUtilization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetLastValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastValue'
type Cache_GetLastValue_Call struct {
	*mock.Call
}

// GetLastValue is a helper method to define mock.On call
func (_e *Cache_Expecter) GetLastValue() *Cache_GetLastValue_Call {
	return &Cache_GetLastValue_Call{Call: _e.mock.On("GetLastValue")}
}

func (_c *Cache_GetLastValue_Call) Run(run func()) *Cache_GetLastValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_GetLastValue_Call) Return(_a0 []entities.ServerUtilization, _a1 error) *Cache_GetLastValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetLastValue_Call) RunAndReturn(run func() ([]entities.ServerUtilization, error)) *Cache_GetLastValue_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function with given fields:
func (_m *Cache) GetTemplate() ([]entities.ServerUtilization, error) {
	ret := _m.Called()

	var r0 []entities.ServerUtilization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.ServerUtilization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.ServerUtilization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ServerUtilization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type Cache_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
func (_e *Cache_Expecter) GetTemplate() *Cache_GetTemplate_Call {
	return &Cache_GetTemplate_Call{Call: _e.mock.On("GetTemplate")}
}

func (_c *Cache_GetTemplate_Call) Run(run func()) *Cache_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_GetTemplate_Call) Return(_a0 []entities.ServerUtilization, _a1 error) *Cache_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetTemplate_Call) RunAndReturn(run func() ([]entities.ServerUtilization, error)) *Cache_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SetItemIds provides a mock function with given fields: _a0
func (_m *Cache) SetItemIds(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetItemIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetItemIds'
type Cache_SetItemIds_Call struct {
	*mock.Call
}

// SetItemIds is a helper method to define mock.On call
//   - _a0 []string
func (_e *Cache_Expecter) SetItemIds(_a0 interface{}) *Cache_SetItemIds_Call {
	return &Cache_SetItemIds_Call{Call: _e.mock.On("SetItemIds", _a0)}
}

func (_c *Cache_SetItemIds_Call) Run(run func(_a0 []string)) *Cache_SetItemIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Cache_SetItemIds_Call) Return(_a0 error) *Cache_SetItemIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetItemIds_Call) RunAndReturn(run func([]string) error) *Cache_SetItemIds_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastValue provides a mock function with given fields: _a0
func (_m *Cache) SetLastValue(_a0 []entities.ServerUtilization) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]entities.ServerUtilization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetLastValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastValue'
type Cache_SetLastValue_Call struct {
	*mock.Call
}

// SetLastValue is a helper method to define mock.On call
//   - _a0 []entities.ServerUtilization
func (_e *Cache_Expecter) SetLastValue(_a0 interface{}) *Cache_SetLastValue_Call {
	return &Cache_SetLastValue_Call{Call: _e.mock.On("SetLastValue", _a0)}
}

func (_c *Cache_SetLastValue_Call) Run(run func(_a0 []entities.ServerUtilization)) *Cache_SetLastValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.ServerUtilization))
	})
	return _c
}

func (_c *Cache_SetLastValue_Call) Return(_a0 error) *Cache_SetLastValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetLastValue_Call) RunAndReturn(run func([]entities.ServerUtilization) error) *Cache_SetLastValue_Call {
	_c.Call.Return(run)
	return _c
}

// SetTemplate provides a mock function with given fields: template
func (_m *Cache) SetTemplate(template []entities.ServerUtilization) error {
	ret := _m.Called(template)

	var r0 error
	if rf, ok := ret.Get(0).(func([]entities.ServerUtilization) error); ok {
		r0 = rf(template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTemplate'
type Cache_SetTemplate_Call struct {
	*mock.Call
}

// SetTemplate is a helper method to define mock.On call
//   - template []entities.ServerUtilization
func (_e *Cache_Expecter) SetTemplate(template interface{}) *Cache_SetTemplate_Call {
	return &Cache_SetTemplate_Call{Call: _e.mock.On("SetTemplate", template)}
}

func (_c *Cache_SetTemplate_Call) Run(run func(template []entities.ServerUtilization)) *Cache_SetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.ServerUtilization))
	})
	return _c
}

func (_c *Cache_SetTemplate_Call) Return(_a0 error) *Cache_SetTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetTemplate_Call) RunAndReturn(run func([]entities.ServerUtilization) error) *Cache_SetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

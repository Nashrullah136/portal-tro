// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"

	repositories "nashrul-be/crm/repositories"
)

// ExportCsvRepositoryInterface is an autogenerated mock type for the ExportCsvRepositoryInterface type
type ExportCsvRepositoryInterface struct {
	mock.Mock
}

type ExportCsvRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ExportCsvRepositoryInterface) EXPECT() *ExportCsvRepositoryInterface_Expecter {
	return &ExportCsvRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with given fields: ctx, query
func (_m *ExportCsvRepositoryInterface) CountAll(ctx context.Context, query repositories.ExportCsvQuery) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ExportCsvQuery) (int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ExportCsvQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.ExportCsvQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportCsvRepositoryInterface_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type ExportCsvRepositoryInterface_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.ExportCsvQuery
func (_e *ExportCsvRepositoryInterface_Expecter) CountAll(ctx interface{}, query interface{}) *ExportCsvRepositoryInterface_CountAll_Call {
	return &ExportCsvRepositoryInterface_CountAll_Call{Call: _e.mock.On("CountAll", ctx, query)}
}

func (_c *ExportCsvRepositoryInterface_CountAll_Call) Run(run func(ctx context.Context, query repositories.ExportCsvQuery)) *ExportCsvRepositoryInterface_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.ExportCsvQuery))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_CountAll_Call) Return(_a0 int, _a1 error) *ExportCsvRepositoryInterface_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExportCsvRepositoryInterface_CountAll_Call) RunAndReturn(run func(context.Context, repositories.ExportCsvQuery) (int, error)) *ExportCsvRepositoryInterface_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: exportCsv
func (_m *ExportCsvRepositoryInterface) Create(exportCsv entities.ExportCsv) (entities.ExportCsv, error) {
	ret := _m.Called(exportCsv)

	var r0 entities.ExportCsv
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.ExportCsv) (entities.ExportCsv, error)); ok {
		return rf(exportCsv)
	}
	if rf, ok := ret.Get(0).(func(entities.ExportCsv) entities.ExportCsv); ok {
		r0 = rf(exportCsv)
	} else {
		r0 = ret.Get(0).(entities.ExportCsv)
	}

	if rf, ok := ret.Get(1).(func(entities.ExportCsv) error); ok {
		r1 = rf(exportCsv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportCsvRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ExportCsvRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - exportCsv entities.ExportCsv
func (_e *ExportCsvRepositoryInterface_Expecter) Create(exportCsv interface{}) *ExportCsvRepositoryInterface_Create_Call {
	return &ExportCsvRepositoryInterface_Create_Call{Call: _e.mock.On("Create", exportCsv)}
}

func (_c *ExportCsvRepositoryInterface_Create_Call) Run(run func(exportCsv entities.ExportCsv)) *ExportCsvRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ExportCsv))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_Create_Call) Return(_a0 entities.ExportCsv, _a1 error) *ExportCsvRepositoryInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExportCsvRepositoryInterface_Create_Call) RunAndReturn(run func(entities.ExportCsv) (entities.ExportCsv, error)) *ExportCsvRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ExportCsvRepositoryInterface) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportCsvRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ExportCsvRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *ExportCsvRepositoryInterface_Expecter) Delete(ctx interface{}, id interface{}) *ExportCsvRepositoryInterface_Delete_Call {
	return &ExportCsvRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ExportCsvRepositoryInterface_Delete_Call) Run(run func(ctx context.Context, id uint)) *ExportCsvRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_Delete_Call) Return(_a0 error) *ExportCsvRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExportCsvRepositoryInterface_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *ExportCsvRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *ExportCsvRepositoryInterface) GetAll(ctx context.Context, query repositories.ExportCsvQuery, limit int, offset int) ([]entities.ExportCsv, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []entities.ExportCsv
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ExportCsvQuery, int, int) ([]entities.ExportCsv, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ExportCsvQuery, int, int) []entities.ExportCsv); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ExportCsv)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.ExportCsvQuery, int, int) error); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportCsvRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ExportCsvRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.ExportCsvQuery
//   - limit int
//   - offset int
func (_e *ExportCsvRepositoryInterface_Expecter) GetAll(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *ExportCsvRepositoryInterface_GetAll_Call {
	return &ExportCsvRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, query, limit, offset)}
}

func (_c *ExportCsvRepositoryInterface_GetAll_Call) Run(run func(ctx context.Context, query repositories.ExportCsvQuery, limit int, offset int)) *ExportCsvRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.ExportCsvQuery), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_GetAll_Call) Return(exportCsv []entities.ExportCsv, err error) *ExportCsvRepositoryInterface_GetAll_Call {
	_c.Call.Return(exportCsv, err)
	return _c
}

func (_c *ExportCsvRepositoryInterface_GetAll_Call) RunAndReturn(run func(context.Context, repositories.ExportCsvQuery, int, int) ([]entities.ExportCsv, error)) *ExportCsvRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *ExportCsvRepositoryInterface) GetById(id uint) (entities.ExportCsv, error) {
	ret := _m.Called(id)

	var r0 entities.ExportCsv
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entities.ExportCsv, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entities.ExportCsv); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.ExportCsv)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportCsvRepositoryInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type ExportCsvRepositoryInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id uint
func (_e *ExportCsvRepositoryInterface_Expecter) GetById(id interface{}) *ExportCsvRepositoryInterface_GetById_Call {
	return &ExportCsvRepositoryInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *ExportCsvRepositoryInterface_GetById_Call) Run(run func(id uint)) *ExportCsvRepositoryInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_GetById_Call) Return(_a0 entities.ExportCsv, _a1 error) *ExportCsvRepositoryInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExportCsvRepositoryInterface_GetById_Call) RunAndReturn(run func(uint) (entities.ExportCsv, error)) *ExportCsvRepositoryInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: exportCsv
func (_m *ExportCsvRepositoryInterface) Update(exportCsv entities.ExportCsv) error {
	ret := _m.Called(exportCsv)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.ExportCsv) error); ok {
		r0 = rf(exportCsv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportCsvRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ExportCsvRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - exportCsv entities.ExportCsv
func (_e *ExportCsvRepositoryInterface_Expecter) Update(exportCsv interface{}) *ExportCsvRepositoryInterface_Update_Call {
	return &ExportCsvRepositoryInterface_Update_Call{Call: _e.mock.On("Update", exportCsv)}
}

func (_c *ExportCsvRepositoryInterface_Update_Call) Run(run func(exportCsv entities.ExportCsv)) *ExportCsvRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.ExportCsv))
	})
	return _c
}

func (_c *ExportCsvRepositoryInterface_Update_Call) Return(_a0 error) *ExportCsvRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExportCsvRepositoryInterface_Update_Call) RunAndReturn(run func(entities.ExportCsv) error) *ExportCsvRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExportCsvRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewExportCsvRepositoryInterface creates a new instance of ExportCsvRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExportCsvRepositoryInterface(t mockConstructorTestingTNewExportCsvRepositoryInterface) *ExportCsvRepositoryInterface {
	mock := &ExportCsvRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

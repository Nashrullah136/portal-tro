// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"
	db "nashrul-be/crm/utils/db"

	mock "github.com/stretchr/testify/mock"

	repositories "nashrul-be/crm/repositories"
)

// RdnRepositoryInterface is an autogenerated mock type for the RdnRepositoryInterface type
type RdnRepositoryInterface struct {
	mock.Mock
}

type RdnRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RdnRepositoryInterface) EXPECT() *RdnRepositoryInterface_Expecter {
	return &RdnRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields:
func (_m *RdnRepositoryInterface) Begin() db.Transactor {
	ret := _m.Called()

	var r0 db.Transactor
	if rf, ok := ret.Get(0).(func() db.Transactor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Transactor)
		}
	}

	return r0
}

// RdnRepositoryInterface_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type RdnRepositoryInterface_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *RdnRepositoryInterface_Expecter) Begin() *RdnRepositoryInterface_Begin_Call {
	return &RdnRepositoryInterface_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *RdnRepositoryInterface_Begin_Call) Run(run func()) *RdnRepositoryInterface_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RdnRepositoryInterface_Begin_Call) Return(_a0 db.Transactor) *RdnRepositoryInterface_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RdnRepositoryInterface_Begin_Call) RunAndReturn(run func() db.Transactor) *RdnRepositoryInterface_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithCond provides a mock function with given fields: ctx, whereCond
func (_m *RdnRepositoryInterface) GetWithCond(ctx context.Context, whereCond map[string]interface{}) ([]entities.RDN, error) {
	ret := _m.Called(ctx, whereCond)

	var r0 []entities.RDN
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) ([]entities.RDN, error)); ok {
		return rf(ctx, whereCond)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) []entities.RDN); ok {
		r0 = rf(ctx, whereCond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RDN)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, whereCond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RdnRepositoryInterface_GetWithCond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithCond'
type RdnRepositoryInterface_GetWithCond_Call struct {
	*mock.Call
}

// GetWithCond is a helper method to define mock.On call
//   - ctx context.Context
//   - whereCond map[string]interface{}
func (_e *RdnRepositoryInterface_Expecter) GetWithCond(ctx interface{}, whereCond interface{}) *RdnRepositoryInterface_GetWithCond_Call {
	return &RdnRepositoryInterface_GetWithCond_Call{Call: _e.mock.On("GetWithCond", ctx, whereCond)}
}

func (_c *RdnRepositoryInterface_GetWithCond_Call) Run(run func(ctx context.Context, whereCond map[string]interface{})) *RdnRepositoryInterface_GetWithCond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *RdnRepositoryInterface_GetWithCond_Call) Return(_a0 []entities.RDN, _a1 error) *RdnRepositoryInterface_GetWithCond_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RdnRepositoryInterface_GetWithCond_Call) RunAndReturn(run func(context.Context, map[string]interface{}) ([]entities.RDN, error)) *RdnRepositoryInterface_GetWithCond_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAuditUpdate provides a mock function with given fields: ctx, briva
func (_m *RdnRepositoryInterface) MakeAuditUpdate(ctx context.Context, briva entities.RDN) (entities.Audit, error) {
	ret := _m.Called(ctx, briva)

	var r0 entities.Audit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.RDN) (entities.Audit, error)); ok {
		return rf(ctx, briva)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.RDN) entities.Audit); ok {
		r0 = rf(ctx, briva)
	} else {
		r0 = ret.Get(0).(entities.Audit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.RDN) error); ok {
		r1 = rf(ctx, briva)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RdnRepositoryInterface_MakeAuditUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAuditUpdate'
type RdnRepositoryInterface_MakeAuditUpdate_Call struct {
	*mock.Call
}

// MakeAuditUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - briva entities.RDN
func (_e *RdnRepositoryInterface_Expecter) MakeAuditUpdate(ctx interface{}, briva interface{}) *RdnRepositoryInterface_MakeAuditUpdate_Call {
	return &RdnRepositoryInterface_MakeAuditUpdate_Call{Call: _e.mock.On("MakeAuditUpdate", ctx, briva)}
}

func (_c *RdnRepositoryInterface_MakeAuditUpdate_Call) Run(run func(ctx context.Context, briva entities.RDN)) *RdnRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.RDN))
	})
	return _c
}

func (_c *RdnRepositoryInterface_MakeAuditUpdate_Call) Return(_a0 entities.Audit, _a1 error) *RdnRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RdnRepositoryInterface_MakeAuditUpdate_Call) RunAndReturn(run func(context.Context, entities.RDN) (entities.Audit, error)) *RdnRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: transact
func (_m *RdnRepositoryInterface) New(transact db.Transactor) repositories.RdnRepositoryInterface {
	ret := _m.Called(transact)

	var r0 repositories.RdnRepositoryInterface
	if rf, ok := ret.Get(0).(func(db.Transactor) repositories.RdnRepositoryInterface); ok {
		r0 = rf(transact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.RdnRepositoryInterface)
		}
	}

	return r0
}

// RdnRepositoryInterface_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type RdnRepositoryInterface_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - transact db.Transactor
func (_e *RdnRepositoryInterface_Expecter) New(transact interface{}) *RdnRepositoryInterface_New_Call {
	return &RdnRepositoryInterface_New_Call{Call: _e.mock.On("New", transact)}
}

func (_c *RdnRepositoryInterface_New_Call) Run(run func(transact db.Transactor)) *RdnRepositoryInterface_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Transactor))
	})
	return _c
}

func (_c *RdnRepositoryInterface_New_Call) Return(_a0 repositories.RdnRepositoryInterface) *RdnRepositoryInterface_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RdnRepositoryInterface_New_Call) RunAndReturn(run func(db.Transactor) repositories.RdnRepositoryInterface) *RdnRepositoryInterface_New_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, briva
func (_m *RdnRepositoryInterface) Update(ctx context.Context, briva entities.RDN) error {
	ret := _m.Called(ctx, briva)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.RDN) error); ok {
		r0 = rf(ctx, briva)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RdnRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RdnRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - briva entities.RDN
func (_e *RdnRepositoryInterface_Expecter) Update(ctx interface{}, briva interface{}) *RdnRepositoryInterface_Update_Call {
	return &RdnRepositoryInterface_Update_Call{Call: _e.mock.On("Update", ctx, briva)}
}

func (_c *RdnRepositoryInterface_Update_Call) Run(run func(ctx context.Context, briva entities.RDN)) *RdnRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.RDN))
	})
	return _c
}

func (_c *RdnRepositoryInterface_Update_Call) Return(_a0 error) *RdnRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RdnRepositoryInterface_Update_Call) RunAndReturn(run func(context.Context, entities.RDN) error) *RdnRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithWhereCond provides a mock function with given fields: ctx, rdn, whereCond
func (_m *RdnRepositoryInterface) UpdateWithWhereCond(ctx context.Context, rdn entities.RDN, whereCond map[string]interface{}) error {
	ret := _m.Called(ctx, rdn, whereCond)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.RDN, map[string]interface{}) error); ok {
		r0 = rf(ctx, rdn, whereCond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RdnRepositoryInterface_UpdateWithWhereCond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithWhereCond'
type RdnRepositoryInterface_UpdateWithWhereCond_Call struct {
	*mock.Call
}

// UpdateWithWhereCond is a helper method to define mock.On call
//   - ctx context.Context
//   - rdn entities.RDN
//   - whereCond map[string]interface{}
func (_e *RdnRepositoryInterface_Expecter) UpdateWithWhereCond(ctx interface{}, rdn interface{}, whereCond interface{}) *RdnRepositoryInterface_UpdateWithWhereCond_Call {
	return &RdnRepositoryInterface_UpdateWithWhereCond_Call{Call: _e.mock.On("UpdateWithWhereCond", ctx, rdn, whereCond)}
}

func (_c *RdnRepositoryInterface_UpdateWithWhereCond_Call) Run(run func(ctx context.Context, rdn entities.RDN, whereCond map[string]interface{})) *RdnRepositoryInterface_UpdateWithWhereCond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.RDN), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *RdnRepositoryInterface_UpdateWithWhereCond_Call) Return(_a0 error) *RdnRepositoryInterface_UpdateWithWhereCond_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RdnRepositoryInterface_UpdateWithWhereCond_Call) RunAndReturn(run func(context.Context, entities.RDN, map[string]interface{}) error) *RdnRepositoryInterface_UpdateWithWhereCond_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRdnRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRdnRepositoryInterface creates a new instance of RdnRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRdnRepositoryInterface(t mockConstructorTestingTNewRdnRepositoryInterface) *RdnRepositoryInterface {
	mock := &RdnRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

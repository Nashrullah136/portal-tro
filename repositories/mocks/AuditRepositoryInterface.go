// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"
	db "nashrul-be/crm/utils/db"

	mock "github.com/stretchr/testify/mock"

	repositories "nashrul-be/crm/repositories"
)

// AuditRepositoryInterface is an autogenerated mock type for the AuditRepositoryInterface type
type AuditRepositoryInterface struct {
	mock.Mock
}

type AuditRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditRepositoryInterface) EXPECT() *AuditRepositoryInterface_Expecter {
	return &AuditRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields:
func (_m *AuditRepositoryInterface) Begin() db.Transactor {
	ret := _m.Called()

	var r0 db.Transactor
	if rf, ok := ret.Get(0).(func() db.Transactor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Transactor)
		}
	}

	return r0
}

// AuditRepositoryInterface_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type AuditRepositoryInterface_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *AuditRepositoryInterface_Expecter) Begin() *AuditRepositoryInterface_Begin_Call {
	return &AuditRepositoryInterface_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *AuditRepositoryInterface_Begin_Call) Run(run func()) *AuditRepositoryInterface_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuditRepositoryInterface_Begin_Call) Return(_a0 db.Transactor) *AuditRepositoryInterface_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditRepositoryInterface_Begin_Call) RunAndReturn(run func() db.Transactor) *AuditRepositoryInterface_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// CountGetAll provides a mock function with given fields: ctx, query
func (_m *AuditRepositoryInterface) CountGetAll(ctx context.Context, query repositories.AuditQuery) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) (int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AuditQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditRepositoryInterface_CountGetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountGetAll'
type AuditRepositoryInterface_CountGetAll_Call struct {
	*mock.Call
}

// CountGetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
func (_e *AuditRepositoryInterface_Expecter) CountGetAll(ctx interface{}, query interface{}) *AuditRepositoryInterface_CountGetAll_Call {
	return &AuditRepositoryInterface_CountGetAll_Call{Call: _e.mock.On("CountGetAll", ctx, query)}
}

func (_c *AuditRepositoryInterface_CountGetAll_Call) Run(run func(ctx context.Context, query repositories.AuditQuery)) *AuditRepositoryInterface_CountGetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery))
	})
	return _c
}

func (_c *AuditRepositoryInterface_CountGetAll_Call) Return(_a0 int, _a1 error) *AuditRepositoryInterface_CountGetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditRepositoryInterface_CountGetAll_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery) (int, error)) *AuditRepositoryInterface_CountGetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: audit
func (_m *AuditRepositoryInterface) Create(audit entities.Audit) error {
	ret := _m.Called(audit)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Audit) error); ok {
		r0 = rf(audit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuditRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuditRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - audit entities.Audit
func (_e *AuditRepositoryInterface_Expecter) Create(audit interface{}) *AuditRepositoryInterface_Create_Call {
	return &AuditRepositoryInterface_Create_Call{Call: _e.mock.On("Create", audit)}
}

func (_c *AuditRepositoryInterface_Create_Call) Run(run func(audit entities.Audit)) *AuditRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Audit))
	})
	return _c
}

func (_c *AuditRepositoryInterface_Create_Call) Return(_a0 error) *AuditRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditRepositoryInterface_Create_Call) RunAndReturn(run func(entities.Audit) error) *AuditRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAudit provides a mock function with given fields: ctx, action
func (_m *AuditRepositoryInterface) CreateAudit(ctx context.Context, action string) error {
	ret := _m.Called(ctx, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuditRepositoryInterface_CreateAudit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAudit'
type AuditRepositoryInterface_CreateAudit_Call struct {
	*mock.Call
}

// CreateAudit is a helper method to define mock.On call
//   - ctx context.Context
//   - action string
func (_e *AuditRepositoryInterface_Expecter) CreateAudit(ctx interface{}, action interface{}) *AuditRepositoryInterface_CreateAudit_Call {
	return &AuditRepositoryInterface_CreateAudit_Call{Call: _e.mock.On("CreateAudit", ctx, action)}
}

func (_c *AuditRepositoryInterface_CreateAudit_Call) Run(run func(ctx context.Context, action string)) *AuditRepositoryInterface_CreateAudit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuditRepositoryInterface_CreateAudit_Call) Return(err error) *AuditRepositoryInterface_CreateAudit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuditRepositoryInterface_CreateAudit_Call) RunAndReturn(run func(context.Context, string) error) *AuditRepositoryInterface_CreateAudit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, query, limit, offset
func (_m *AuditRepositoryInterface) GetAll(ctx context.Context, query repositories.AuditQuery, limit int, offset int) ([]entities.Audit, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []entities.Audit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery, int, int) ([]entities.Audit, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AuditQuery, int, int) []entities.Audit); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Audit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AuditQuery, int, int) error); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type AuditRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.AuditQuery
//   - limit int
//   - offset int
func (_e *AuditRepositoryInterface_Expecter) GetAll(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *AuditRepositoryInterface_GetAll_Call {
	return &AuditRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, query, limit, offset)}
}

func (_c *AuditRepositoryInterface_GetAll_Call) Run(run func(ctx context.Context, query repositories.AuditQuery, limit int, offset int)) *AuditRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.AuditQuery), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *AuditRepositoryInterface_GetAll_Call) Return(result []entities.Audit, err error) *AuditRepositoryInterface_GetAll_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *AuditRepositoryInterface_GetAll_Call) RunAndReturn(run func(context.Context, repositories.AuditQuery, int, int) ([]entities.Audit, error)) *AuditRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: transact
func (_m *AuditRepositoryInterface) New(transact db.Transactor) repositories.AuditRepositoryInterface {
	ret := _m.Called(transact)

	var r0 repositories.AuditRepositoryInterface
	if rf, ok := ret.Get(0).(func(db.Transactor) repositories.AuditRepositoryInterface); ok {
		r0 = rf(transact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.AuditRepositoryInterface)
		}
	}

	return r0
}

// AuditRepositoryInterface_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type AuditRepositoryInterface_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - transact db.Transactor
func (_e *AuditRepositoryInterface_Expecter) New(transact interface{}) *AuditRepositoryInterface_New_Call {
	return &AuditRepositoryInterface_New_Call{Call: _e.mock.On("New", transact)}
}

func (_c *AuditRepositoryInterface_New_Call) Run(run func(transact db.Transactor)) *AuditRepositoryInterface_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Transactor))
	})
	return _c
}

func (_c *AuditRepositoryInterface_New_Call) Return(_a0 repositories.AuditRepositoryInterface) *AuditRepositoryInterface_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditRepositoryInterface_New_Call) RunAndReturn(run func(db.Transactor) repositories.AuditRepositoryInterface) *AuditRepositoryInterface_New_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuditRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuditRepositoryInterface creates a new instance of AuditRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuditRepositoryInterface(t mockConstructorTestingTNewAuditRepositoryInterface) *AuditRepositoryInterface {
	mock := &AuditRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"

	mock "github.com/stretchr/testify/mock"
)

// ActorRepositoryInterface is an autogenerated mock type for the ActorRepositoryInterface type
type ActorRepositoryInterface struct {
	mock.Mock
}

type ActorRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ActorRepositoryInterface) EXPECT() *ActorRepositoryInterface_Expecter {
	return &ActorRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with given fields: ctx, username, role
func (_m *ActorRepositoryInterface) CountAll(ctx context.Context, username string, role string) (int, error) {
	ret := _m.Called(ctx, username, role)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, username, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, username, role)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type ActorRepositoryInterface_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - role string
func (_e *ActorRepositoryInterface_Expecter) CountAll(ctx interface{}, username interface{}, role interface{}) *ActorRepositoryInterface_CountAll_Call {
	return &ActorRepositoryInterface_CountAll_Call{Call: _e.mock.On("CountAll", ctx, username, role)}
}

func (_c *ActorRepositoryInterface_CountAll_Call) Run(run func(ctx context.Context, username string, role string)) *ActorRepositoryInterface_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ActorRepositoryInterface_CountAll_Call) Return(result int, err error) *ActorRepositoryInterface_CountAll_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ActorRepositoryInterface_CountAll_Call) RunAndReturn(run func(context.Context, string, string) (int, error)) *ActorRepositoryInterface_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, actor
func (_m *ActorRepositoryInterface) Create(ctx context.Context, actor entities.User) (entities.User, error) {
	ret := _m.Called(ctx, actor)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) (entities.User, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) entities.User); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ActorRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - actor entities.User
func (_e *ActorRepositoryInterface_Expecter) Create(ctx interface{}, actor interface{}) *ActorRepositoryInterface_Create_Call {
	return &ActorRepositoryInterface_Create_Call{Call: _e.mock.On("Create", ctx, actor)}
}

func (_c *ActorRepositoryInterface_Create_Call) Run(run func(ctx context.Context, actor entities.User)) *ActorRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *ActorRepositoryInterface_Create_Call) Return(result entities.User, err error) *ActorRepositoryInterface_Create_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ActorRepositoryInterface_Create_Call) RunAndReturn(run func(context.Context, entities.User) (entities.User, error)) *ActorRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, username
func (_m *ActorRepositoryInterface) Delete(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ActorRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ActorRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *ActorRepositoryInterface_Expecter) Delete(ctx interface{}, username interface{}) *ActorRepositoryInterface_Delete_Call {
	return &ActorRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, username)}
}

func (_c *ActorRepositoryInterface_Delete_Call) Run(run func(ctx context.Context, username string)) *ActorRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ActorRepositoryInterface_Delete_Call) Return(err error) *ActorRepositoryInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ActorRepositoryInterface_Delete_Call) RunAndReturn(run func(context.Context, string) error) *ActorRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, username, role, limit, offset
func (_m *ActorRepositoryInterface) GetAll(ctx context.Context, username string, role string, limit uint, offset uint) ([]entities.User, error) {
	ret := _m.Called(ctx, username, role, limit, offset)

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint, uint) ([]entities.User, error)); ok {
		return rf(ctx, username, role, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint, uint) []entities.User); ok {
		r0 = rf(ctx, username, role, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint, uint) error); ok {
		r1 = rf(ctx, username, role, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ActorRepositoryInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - role string
//   - limit uint
//   - offset uint
func (_e *ActorRepositoryInterface_Expecter) GetAll(ctx interface{}, username interface{}, role interface{}, limit interface{}, offset interface{}) *ActorRepositoryInterface_GetAll_Call {
	return &ActorRepositoryInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx, username, role, limit, offset)}
}

func (_c *ActorRepositoryInterface_GetAll_Call) Run(run func(ctx context.Context, username string, role string, limit uint, offset uint)) *ActorRepositoryInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uint), args[4].(uint))
	})
	return _c
}

func (_c *ActorRepositoryInterface_GetAll_Call) Return(actor []entities.User, err error) *ActorRepositoryInterface_GetAll_Call {
	_c.Call.Return(actor, err)
	return _c
}

func (_c *ActorRepositoryInterface_GetAll_Call) RunAndReturn(run func(context.Context, string, string, uint, uint) ([]entities.User, error)) *ActorRepositoryInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *ActorRepositoryInterface) GetByUsername(ctx context.Context, username string) (entities.User, error) {
	ret := _m.Called(ctx, username)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type ActorRepositoryInterface_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *ActorRepositoryInterface_Expecter) GetByUsername(ctx interface{}, username interface{}) *ActorRepositoryInterface_GetByUsername_Call {
	return &ActorRepositoryInterface_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *ActorRepositoryInterface_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *ActorRepositoryInterface_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ActorRepositoryInterface_GetByUsername_Call) Return(actor entities.User, err error) *ActorRepositoryInterface_GetByUsername_Call {
	_c.Call.Return(actor, err)
	return _c
}

func (_c *ActorRepositoryInterface_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (entities.User, error)) *ActorRepositoryInterface_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsernameBatch provides a mock function with given fields: ctx, username
func (_m *ActorRepositoryInterface) GetByUsernameBatch(ctx context.Context, username []string) ([]entities.User, error) {
	ret := _m.Called(ctx, username)

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]entities.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []entities.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_GetByUsernameBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsernameBatch'
type ActorRepositoryInterface_GetByUsernameBatch_Call struct {
	*mock.Call
}

// GetByUsernameBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - username []string
func (_e *ActorRepositoryInterface_Expecter) GetByUsernameBatch(ctx interface{}, username interface{}) *ActorRepositoryInterface_GetByUsernameBatch_Call {
	return &ActorRepositoryInterface_GetByUsernameBatch_Call{Call: _e.mock.On("GetByUsernameBatch", ctx, username)}
}

func (_c *ActorRepositoryInterface_GetByUsernameBatch_Call) Run(run func(ctx context.Context, username []string)) *ActorRepositoryInterface_GetByUsernameBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *ActorRepositoryInterface_GetByUsernameBatch_Call) Return(actors []entities.User, err error) *ActorRepositoryInterface_GetByUsernameBatch_Call {
	_c.Call.Return(actors, err)
	return _c
}

func (_c *ActorRepositoryInterface_GetByUsernameBatch_Call) RunAndReturn(run func(context.Context, []string) ([]entities.User, error)) *ActorRepositoryInterface_GetByUsernameBatch_Call {
	_c.Call.Return(run)
	return _c
}

// IsUsernameExist provides a mock function with given fields: actor
func (_m *ActorRepositoryInterface) IsUsernameExist(actor entities.User) (bool, error) {
	ret := _m.Called(actor)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.User) (bool, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(entities.User) bool); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_IsUsernameExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUsernameExist'
type ActorRepositoryInterface_IsUsernameExist_Call struct {
	*mock.Call
}

// IsUsernameExist is a helper method to define mock.On call
//   - actor entities.User
func (_e *ActorRepositoryInterface_Expecter) IsUsernameExist(actor interface{}) *ActorRepositoryInterface_IsUsernameExist_Call {
	return &ActorRepositoryInterface_IsUsernameExist_Call{Call: _e.mock.On("IsUsernameExist", actor)}
}

func (_c *ActorRepositoryInterface_IsUsernameExist_Call) Run(run func(actor entities.User)) *ActorRepositoryInterface_IsUsernameExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.User))
	})
	return _c
}

func (_c *ActorRepositoryInterface_IsUsernameExist_Call) Return(exist bool, err error) *ActorRepositoryInterface_IsUsernameExist_Call {
	_c.Call.Return(exist, err)
	return _c
}

func (_c *ActorRepositoryInterface_IsUsernameExist_Call) RunAndReturn(run func(entities.User) (bool, error)) *ActorRepositoryInterface_IsUsernameExist_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, actor
func (_m *ActorRepositoryInterface) Save(ctx context.Context, actor entities.User) (entities.User, error) {
	ret := _m.Called(ctx, actor)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) (entities.User, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) entities.User); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActorRepositoryInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ActorRepositoryInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - actor entities.User
func (_e *ActorRepositoryInterface_Expecter) Save(ctx interface{}, actor interface{}) *ActorRepositoryInterface_Save_Call {
	return &ActorRepositoryInterface_Save_Call{Call: _e.mock.On("Save", ctx, actor)}
}

func (_c *ActorRepositoryInterface_Save_Call) Run(run func(ctx context.Context, actor entities.User)) *ActorRepositoryInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *ActorRepositoryInterface_Save_Call) Return(result entities.User, err error) *ActorRepositoryInterface_Save_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ActorRepositoryInterface_Save_Call) RunAndReturn(run func(context.Context, entities.User) (entities.User, error)) *ActorRepositoryInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, actor
func (_m *ActorRepositoryInterface) Update(ctx context.Context, actor entities.User) error {
	ret := _m.Called(ctx, actor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ActorRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ActorRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - actor entities.User
func (_e *ActorRepositoryInterface_Expecter) Update(ctx interface{}, actor interface{}) *ActorRepositoryInterface_Update_Call {
	return &ActorRepositoryInterface_Update_Call{Call: _e.mock.On("Update", ctx, actor)}
}

func (_c *ActorRepositoryInterface_Update_Call) Run(run func(ctx context.Context, actor entities.User)) *ActorRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *ActorRepositoryInterface_Update_Call) Return(err error) *ActorRepositoryInterface_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ActorRepositoryInterface_Update_Call) RunAndReturn(run func(context.Context, entities.User) error) *ActorRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewActorRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewActorRepositoryInterface creates a new instance of ActorRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewActorRepositoryInterface(t mockConstructorTestingTNewActorRepositoryInterface) *ActorRepositoryInterface {
	mock := &ActorRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

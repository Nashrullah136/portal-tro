// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "nashrul-be/crm/entities"
	db "nashrul-be/crm/utils/db"

	mock "github.com/stretchr/testify/mock"

	repositories "nashrul-be/crm/repositories"
)

// BrivaRepositoryInterface is an autogenerated mock type for the BrivaRepositoryInterface type
type BrivaRepositoryInterface struct {
	mock.Mock
}

type BrivaRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *BrivaRepositoryInterface) EXPECT() *BrivaRepositoryInterface_Expecter {
	return &BrivaRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields:
func (_m *BrivaRepositoryInterface) Begin() db.Transactor {
	ret := _m.Called()

	var r0 db.Transactor
	if rf, ok := ret.Get(0).(func() db.Transactor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Transactor)
		}
	}

	return r0
}

// BrivaRepositoryInterface_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type BrivaRepositoryInterface_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *BrivaRepositoryInterface_Expecter) Begin() *BrivaRepositoryInterface_Begin_Call {
	return &BrivaRepositoryInterface_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *BrivaRepositoryInterface_Begin_Call) Run(run func()) *BrivaRepositoryInterface_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BrivaRepositoryInterface_Begin_Call) Return(_a0 db.Transactor) *BrivaRepositoryInterface_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrivaRepositoryInterface_Begin_Call) RunAndReturn(run func() db.Transactor) *BrivaRepositoryInterface_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBrivaNo provides a mock function with given fields: ctx, brivano
func (_m *BrivaRepositoryInterface) GetByBrivaNo(ctx context.Context, brivano string) (entities.Briva, error) {
	ret := _m.Called(ctx, brivano)

	var r0 entities.Briva
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Briva, error)); ok {
		return rf(ctx, brivano)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Briva); ok {
		r0 = rf(ctx, brivano)
	} else {
		r0 = ret.Get(0).(entities.Briva)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, brivano)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrivaRepositoryInterface_GetByBrivaNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBrivaNo'
type BrivaRepositoryInterface_GetByBrivaNo_Call struct {
	*mock.Call
}

// GetByBrivaNo is a helper method to define mock.On call
//   - ctx context.Context
//   - brivano string
func (_e *BrivaRepositoryInterface_Expecter) GetByBrivaNo(ctx interface{}, brivano interface{}) *BrivaRepositoryInterface_GetByBrivaNo_Call {
	return &BrivaRepositoryInterface_GetByBrivaNo_Call{Call: _e.mock.On("GetByBrivaNo", ctx, brivano)}
}

func (_c *BrivaRepositoryInterface_GetByBrivaNo_Call) Run(run func(ctx context.Context, brivano string)) *BrivaRepositoryInterface_GetByBrivaNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BrivaRepositoryInterface_GetByBrivaNo_Call) Return(briva entities.Briva, err error) *BrivaRepositoryInterface_GetByBrivaNo_Call {
	_c.Call.Return(briva, err)
	return _c
}

func (_c *BrivaRepositoryInterface_GetByBrivaNo_Call) RunAndReturn(run func(context.Context, string) (entities.Briva, error)) *BrivaRepositoryInterface_GetByBrivaNo_Call {
	_c.Call.Return(run)
	return _c
}

// IsBrivaExist provides a mock function with given fields: briva
func (_m *BrivaRepositoryInterface) IsBrivaExist(briva entities.Briva) (bool, error) {
	ret := _m.Called(briva)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Briva) (bool, error)); ok {
		return rf(briva)
	}
	if rf, ok := ret.Get(0).(func(entities.Briva) bool); ok {
		r0 = rf(briva)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(entities.Briva) error); ok {
		r1 = rf(briva)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrivaRepositoryInterface_IsBrivaExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBrivaExist'
type BrivaRepositoryInterface_IsBrivaExist_Call struct {
	*mock.Call
}

// IsBrivaExist is a helper method to define mock.On call
//   - briva entities.Briva
func (_e *BrivaRepositoryInterface_Expecter) IsBrivaExist(briva interface{}) *BrivaRepositoryInterface_IsBrivaExist_Call {
	return &BrivaRepositoryInterface_IsBrivaExist_Call{Call: _e.mock.On("IsBrivaExist", briva)}
}

func (_c *BrivaRepositoryInterface_IsBrivaExist_Call) Run(run func(briva entities.Briva)) *BrivaRepositoryInterface_IsBrivaExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Briva))
	})
	return _c
}

func (_c *BrivaRepositoryInterface_IsBrivaExist_Call) Return(exist bool, err error) *BrivaRepositoryInterface_IsBrivaExist_Call {
	_c.Call.Return(exist, err)
	return _c
}

func (_c *BrivaRepositoryInterface_IsBrivaExist_Call) RunAndReturn(run func(entities.Briva) (bool, error)) *BrivaRepositoryInterface_IsBrivaExist_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAuditUpdate provides a mock function with given fields: ctx, briva
func (_m *BrivaRepositoryInterface) MakeAuditUpdate(ctx context.Context, briva entities.Briva) (entities.Audit, error) {
	ret := _m.Called(ctx, briva)

	var r0 entities.Audit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Briva) (entities.Audit, error)); ok {
		return rf(ctx, briva)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Briva) entities.Audit); ok {
		r0 = rf(ctx, briva)
	} else {
		r0 = ret.Get(0).(entities.Audit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Briva) error); ok {
		r1 = rf(ctx, briva)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrivaRepositoryInterface_MakeAuditUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAuditUpdate'
type BrivaRepositoryInterface_MakeAuditUpdate_Call struct {
	*mock.Call
}

// MakeAuditUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - briva entities.Briva
func (_e *BrivaRepositoryInterface_Expecter) MakeAuditUpdate(ctx interface{}, briva interface{}) *BrivaRepositoryInterface_MakeAuditUpdate_Call {
	return &BrivaRepositoryInterface_MakeAuditUpdate_Call{Call: _e.mock.On("MakeAuditUpdate", ctx, briva)}
}

func (_c *BrivaRepositoryInterface_MakeAuditUpdate_Call) Run(run func(ctx context.Context, briva entities.Briva)) *BrivaRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Briva))
	})
	return _c
}

func (_c *BrivaRepositoryInterface_MakeAuditUpdate_Call) Return(_a0 entities.Audit, _a1 error) *BrivaRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BrivaRepositoryInterface_MakeAuditUpdate_Call) RunAndReturn(run func(context.Context, entities.Briva) (entities.Audit, error)) *BrivaRepositoryInterface_MakeAuditUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: transact
func (_m *BrivaRepositoryInterface) New(transact db.Transactor) repositories.BrivaRepositoryInterface {
	ret := _m.Called(transact)

	var r0 repositories.BrivaRepositoryInterface
	if rf, ok := ret.Get(0).(func(db.Transactor) repositories.BrivaRepositoryInterface); ok {
		r0 = rf(transact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.BrivaRepositoryInterface)
		}
	}

	return r0
}

// BrivaRepositoryInterface_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type BrivaRepositoryInterface_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - transact db.Transactor
func (_e *BrivaRepositoryInterface_Expecter) New(transact interface{}) *BrivaRepositoryInterface_New_Call {
	return &BrivaRepositoryInterface_New_Call{Call: _e.mock.On("New", transact)}
}

func (_c *BrivaRepositoryInterface_New_Call) Run(run func(transact db.Transactor)) *BrivaRepositoryInterface_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Transactor))
	})
	return _c
}

func (_c *BrivaRepositoryInterface_New_Call) Return(_a0 repositories.BrivaRepositoryInterface) *BrivaRepositoryInterface_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrivaRepositoryInterface_New_Call) RunAndReturn(run func(db.Transactor) repositories.BrivaRepositoryInterface) *BrivaRepositoryInterface_New_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, briva
func (_m *BrivaRepositoryInterface) Update(ctx context.Context, briva entities.Briva) error {
	ret := _m.Called(ctx, briva)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Briva) error); ok {
		r0 = rf(ctx, briva)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BrivaRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type BrivaRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - briva entities.Briva
func (_e *BrivaRepositoryInterface_Expecter) Update(ctx interface{}, briva interface{}) *BrivaRepositoryInterface_Update_Call {
	return &BrivaRepositoryInterface_Update_Call{Call: _e.mock.On("Update", ctx, briva)}
}

func (_c *BrivaRepositoryInterface_Update_Call) Run(run func(ctx context.Context, briva entities.Briva)) *BrivaRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Briva))
	})
	return _c
}

func (_c *BrivaRepositoryInterface_Update_Call) Return(_a0 error) *BrivaRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrivaRepositoryInterface_Update_Call) RunAndReturn(run func(context.Context, entities.Briva) error) *BrivaRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBrivaRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBrivaRepositoryInterface creates a new instance of BrivaRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBrivaRepositoryInterface(t mockConstructorTestingTNewBrivaRepositoryInterface) *BrivaRepositoryInterface {
	mock := &BrivaRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
